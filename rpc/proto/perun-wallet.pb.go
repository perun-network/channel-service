// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: perun-wallet.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	protobuf "perun.network/go-perun/wire/protobuf"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Generic rejected message. Returned by any endpoint on failure.
type Rejected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Rejected) Reset() {
	*x = Rejected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rejected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rejected) ProtoMessage() {}

func (x *Rejected) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rejected.ProtoReflect.Descriptor instead.
func (*Rejected) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{0}
}

func (x *Rejected) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type GetChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The channel id of the channel to be closed.
	Requester []byte `protobuf:"bytes,1,opt,name=requester,proto3" json:"requester,omitempty"`
}

func (x *GetChannelsRequest) Reset() {
	*x = GetChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelsRequest) ProtoMessage() {}

func (x *GetChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelsRequest.ProtoReflect.Descriptor instead.
func (*GetChannelsRequest) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{1}
}

func (x *GetChannelsRequest) GetRequester() []byte {
	if x != nil {
		return x.Requester
	}
	return nil
}

type GetChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*GetChannelsResponse_Rejected
	//	*GetChannelsResponse_State
	Msg isGetChannelsResponse_Msg `protobuf_oneof:"msg"`
}

func (x *GetChannelsResponse) Reset() {
	*x = GetChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelsResponse) ProtoMessage() {}

func (x *GetChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelsResponse.ProtoReflect.Descriptor instead.
func (*GetChannelsResponse) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{2}
}

func (m *GetChannelsResponse) GetMsg() isGetChannelsResponse_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *GetChannelsResponse) GetRejected() *Rejected {
	if x, ok := x.GetMsg().(*GetChannelsResponse_Rejected); ok {
		return x.Rejected
	}
	return nil
}

func (x *GetChannelsResponse) GetState() *protobuf.State {
	if x, ok := x.GetMsg().(*GetChannelsResponse_State); ok {
		return x.State
	}
	return nil
}

type isGetChannelsResponse_Msg interface {
	isGetChannelsResponse_Msg()
}

type GetChannelsResponse_Rejected struct {
	Rejected *Rejected `protobuf:"bytes,1,opt,name=rejected,proto3,oneof"`
}

type GetChannelsResponse_State struct {
	State *protobuf.State `protobuf:"bytes,2,opt,name=state,proto3,oneof"`
}

func (*GetChannelsResponse_Rejected) isGetChannelsResponse_Msg() {}

func (*GetChannelsResponse_State) isGetChannelsResponse_Msg() {}

type ChannelOpenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identity of the requester.
	Requester []byte `protobuf:"bytes,1,opt,name=requester,proto3" json:"requester,omitempty"`
	// Identity of the peer to open the channel with.
	Peer []byte `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	// The desired allocation of funds within said channel.
	Allocation *protobuf.Allocation `protobuf:"bytes,3,opt,name=allocation,proto3" json:"allocation,omitempty"`
	// The duration of the challenge period.
	ChallengeDuration uint64 `protobuf:"varint,4,opt,name=challenge_duration,json=challengeDuration,proto3" json:"challenge_duration,omitempty"`
}

func (x *ChannelOpenRequest) Reset() {
	*x = ChannelOpenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelOpenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelOpenRequest) ProtoMessage() {}

func (x *ChannelOpenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelOpenRequest.ProtoReflect.Descriptor instead.
func (*ChannelOpenRequest) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{3}
}

func (x *ChannelOpenRequest) GetRequester() []byte {
	if x != nil {
		return x.Requester
	}
	return nil
}

func (x *ChannelOpenRequest) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ChannelOpenRequest) GetAllocation() *protobuf.Allocation {
	if x != nil {
		return x.Allocation
	}
	return nil
}

func (x *ChannelOpenRequest) GetChallengeDuration() uint64 {
	if x != nil {
		return x.ChallengeDuration
	}
	return 0
}

type ChannelOpenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*ChannelOpenResponse_Rejected
	//	*ChannelOpenResponse_ChannelId
	Msg isChannelOpenResponse_Msg `protobuf_oneof:"msg"`
}

func (x *ChannelOpenResponse) Reset() {
	*x = ChannelOpenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelOpenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelOpenResponse) ProtoMessage() {}

func (x *ChannelOpenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelOpenResponse.ProtoReflect.Descriptor instead.
func (*ChannelOpenResponse) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{4}
}

func (m *ChannelOpenResponse) GetMsg() isChannelOpenResponse_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *ChannelOpenResponse) GetRejected() *Rejected {
	if x, ok := x.GetMsg().(*ChannelOpenResponse_Rejected); ok {
		return x.Rejected
	}
	return nil
}

func (x *ChannelOpenResponse) GetChannelId() []byte {
	if x, ok := x.GetMsg().(*ChannelOpenResponse_ChannelId); ok {
		return x.ChannelId
	}
	return nil
}

type isChannelOpenResponse_Msg interface {
	isChannelOpenResponse_Msg()
}

type ChannelOpenResponse_Rejected struct {
	Rejected *Rejected `protobuf:"bytes,1,opt,name=rejected,proto3,oneof"`
}

type ChannelOpenResponse_ChannelId struct {
	ChannelId []byte `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3,oneof"`
}

func (*ChannelOpenResponse_Rejected) isChannelOpenResponse_Msg() {}

func (*ChannelOpenResponse_ChannelId) isChannelOpenResponse_Msg() {}

type ChannelUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state with which the channel should be updated.
	State *protobuf.State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ChannelUpdateRequest) Reset() {
	*x = ChannelUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelUpdateRequest) ProtoMessage() {}

func (x *ChannelUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelUpdateRequest.ProtoReflect.Descriptor instead.
func (*ChannelUpdateRequest) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{5}
}

func (x *ChannelUpdateRequest) GetState() *protobuf.State {
	if x != nil {
		return x.State
	}
	return nil
}

type SuccessfulUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state with which the channel was updated.
	State *protobuf.State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	// The channel id of the channel which was updated.
	ChannelId []byte `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *SuccessfulUpdate) Reset() {
	*x = SuccessfulUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuccessfulUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessfulUpdate) ProtoMessage() {}

func (x *SuccessfulUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessfulUpdate.ProtoReflect.Descriptor instead.
func (*SuccessfulUpdate) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{6}
}

func (x *SuccessfulUpdate) GetState() *protobuf.State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *SuccessfulUpdate) GetChannelId() []byte {
	if x != nil {
		return x.ChannelId
	}
	return nil
}

type ChannelUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*ChannelUpdateResponse_Rejected
	//	*ChannelUpdateResponse_Update
	Msg isChannelUpdateResponse_Msg `protobuf_oneof:"msg"`
}

func (x *ChannelUpdateResponse) Reset() {
	*x = ChannelUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelUpdateResponse) ProtoMessage() {}

func (x *ChannelUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelUpdateResponse.ProtoReflect.Descriptor instead.
func (*ChannelUpdateResponse) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{7}
}

func (m *ChannelUpdateResponse) GetMsg() isChannelUpdateResponse_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *ChannelUpdateResponse) GetRejected() *Rejected {
	if x, ok := x.GetMsg().(*ChannelUpdateResponse_Rejected); ok {
		return x.Rejected
	}
	return nil
}

func (x *ChannelUpdateResponse) GetUpdate() *SuccessfulUpdate {
	if x, ok := x.GetMsg().(*ChannelUpdateResponse_Update); ok {
		return x.Update
	}
	return nil
}

type isChannelUpdateResponse_Msg interface {
	isChannelUpdateResponse_Msg()
}

type ChannelUpdateResponse_Rejected struct {
	Rejected *Rejected `protobuf:"bytes,1,opt,name=rejected,proto3,oneof"`
}

type ChannelUpdateResponse_Update struct {
	Update *SuccessfulUpdate `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

func (*ChannelUpdateResponse_Rejected) isChannelUpdateResponse_Msg() {}

func (*ChannelUpdateResponse_Update) isChannelUpdateResponse_Msg() {}

type ChannelCloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The channel id of the channel to be closed.
	ChannelId []byte `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *ChannelCloseRequest) Reset() {
	*x = ChannelCloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelCloseRequest) ProtoMessage() {}

func (x *ChannelCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelCloseRequest.ProtoReflect.Descriptor instead.
func (*ChannelCloseRequest) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{8}
}

func (x *ChannelCloseRequest) GetChannelId() []byte {
	if x != nil {
		return x.ChannelId
	}
	return nil
}

type SuccessfulClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The channel id of the channel which was closed.
	ChannelId []byte `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *SuccessfulClose) Reset() {
	*x = SuccessfulClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuccessfulClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessfulClose) ProtoMessage() {}

func (x *SuccessfulClose) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessfulClose.ProtoReflect.Descriptor instead.
func (*SuccessfulClose) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{9}
}

func (x *SuccessfulClose) GetChannelId() []byte {
	if x != nil {
		return x.ChannelId
	}
	return nil
}

type ChannelCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*ChannelCloseResponse_Rejected
	//	*ChannelCloseResponse_Close
	Msg isChannelCloseResponse_Msg `protobuf_oneof:"msg"`
}

func (x *ChannelCloseResponse) Reset() {
	*x = ChannelCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelCloseResponse) ProtoMessage() {}

func (x *ChannelCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelCloseResponse.ProtoReflect.Descriptor instead.
func (*ChannelCloseResponse) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{10}
}

func (m *ChannelCloseResponse) GetMsg() isChannelCloseResponse_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *ChannelCloseResponse) GetRejected() *Rejected {
	if x, ok := x.GetMsg().(*ChannelCloseResponse_Rejected); ok {
		return x.Rejected
	}
	return nil
}

func (x *ChannelCloseResponse) GetClose() *SuccessfulClose {
	if x, ok := x.GetMsg().(*ChannelCloseResponse_Close); ok {
		return x.Close
	}
	return nil
}

type isChannelCloseResponse_Msg interface {
	isChannelCloseResponse_Msg()
}

type ChannelCloseResponse_Rejected struct {
	Rejected *Rejected `protobuf:"bytes,1,opt,name=rejected,proto3,oneof"`
}

type ChannelCloseResponse_Close struct {
	Close *SuccessfulClose `protobuf:"bytes,2,opt,name=close,proto3,oneof"`
}

func (*ChannelCloseResponse_Rejected) isChannelCloseResponse_Msg() {}

func (*ChannelCloseResponse_Close) isChannelCloseResponse_Msg() {}

// Called by the Perun channel service if it received a channel opening request
// from another peer. The proposed channel state is passed to the wallet which
// might use it to show it in to the user.
type OpenChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state with which the channel should be opened.
	Proposal *protobuf.LedgerChannelProposalMsg `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
}

func (x *OpenChannelRequest) Reset() {
	*x = OpenChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenChannelRequest) ProtoMessage() {}

func (x *OpenChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenChannelRequest.ProtoReflect.Descriptor instead.
func (*OpenChannelRequest) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{11}
}

func (x *OpenChannelRequest) GetProposal() *protobuf.LedgerChannelProposalMsg {
	if x != nil {
		return x.Proposal
	}
	return nil
}

type OpenChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*OpenChannelResponse_Rejected
	//	*OpenChannelResponse_NonceShare
	Msg isOpenChannelResponse_Msg `protobuf_oneof:"msg"`
}

func (x *OpenChannelResponse) Reset() {
	*x = OpenChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenChannelResponse) ProtoMessage() {}

func (x *OpenChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenChannelResponse.ProtoReflect.Descriptor instead.
func (*OpenChannelResponse) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{12}
}

func (m *OpenChannelResponse) GetMsg() isOpenChannelResponse_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *OpenChannelResponse) GetRejected() *Rejected {
	if x, ok := x.GetMsg().(*OpenChannelResponse_Rejected); ok {
		return x.Rejected
	}
	return nil
}

func (x *OpenChannelResponse) GetNonceShare() []byte {
	if x, ok := x.GetMsg().(*OpenChannelResponse_NonceShare); ok {
		return x.NonceShare
	}
	return nil
}

type isOpenChannelResponse_Msg interface {
	isOpenChannelResponse_Msg()
}

type OpenChannelResponse_Rejected struct {
	Rejected *Rejected `protobuf:"bytes,1,opt,name=rejected,proto3,oneof"`
}

type OpenChannelResponse_NonceShare struct {
	// The NonceShare generated by the wallet.
	NonceShare []byte `protobuf:"bytes,2,opt,name=nonce_share,json=nonceShare,proto3,oneof"`
}

func (*OpenChannelResponse_Rejected) isOpenChannelResponse_Msg() {}

func (*OpenChannelResponse_NonceShare) isOpenChannelResponse_Msg() {}

type CloseChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The channel id of the channel to be closed.
	ChannelId []byte `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The state with which the channel should be closed.
	State *protobuf.State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *CloseChannelRequest) Reset() {
	*x = CloseChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseChannelRequest) ProtoMessage() {}

func (x *CloseChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseChannelRequest.ProtoReflect.Descriptor instead.
func (*CloseChannelRequest) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{13}
}

func (x *CloseChannelRequest) GetChannelId() []byte {
	if x != nil {
		return x.ChannelId
	}
	return nil
}

func (x *CloseChannelRequest) GetState() *protobuf.State {
	if x != nil {
		return x.State
	}
	return nil
}

type ForceCloseChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The channel id of the channel to be closed.
	ChannelId []byte `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The state with which the channel should be closed.
	State *protobuf.State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ForceCloseChannelRequest) Reset() {
	*x = ForceCloseChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceCloseChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceCloseChannelRequest) ProtoMessage() {}

func (x *ForceCloseChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceCloseChannelRequest.ProtoReflect.Descriptor instead.
func (*ForceCloseChannelRequest) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{14}
}

func (x *ForceCloseChannelRequest) GetChannelId() []byte {
	if x != nil {
		return x.ChannelId
	}
	return nil
}

func (x *ForceCloseChannelRequest) GetState() *protobuf.State {
	if x != nil {
		return x.State
	}
	return nil
}

type ChallengeEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The channel id of the channel which was challenged.
	ChannelId []byte `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The state with which the channel was challenged.
	State *protobuf.State `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ChallengeEventRequest) Reset() {
	*x = ChallengeEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeEventRequest) ProtoMessage() {}

func (x *ChallengeEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeEventRequest.ProtoReflect.Descriptor instead.
func (*ChallengeEventRequest) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{15}
}

func (x *ChallengeEventRequest) GetChannelId() []byte {
	if x != nil {
		return x.ChannelId
	}
	return nil
}

func (x *ChallengeEventRequest) GetState() *protobuf.State {
	if x != nil {
		return x.State
	}
	return nil
}

type UpdateNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state with which the channel should be updated.
	State *protobuf.State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *UpdateNotificationRequest) Reset() {
	*x = UpdateNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotificationRequest) ProtoMessage() {}

func (x *UpdateNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotificationRequest.ProtoReflect.Descriptor instead.
func (*UpdateNotificationRequest) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateNotificationRequest) GetState() *protobuf.State {
	if x != nil {
		return x.State
	}
	return nil
}

type UpdateNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not the channel update was accepted by the user.
	Accepted bool `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
}

func (x *UpdateNotificationResponse) Reset() {
	*x = UpdateNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotificationResponse) ProtoMessage() {}

func (x *UpdateNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotificationResponse.ProtoReflect.Descriptor instead.
func (*UpdateNotificationResponse) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateNotificationResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

type SignMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The public key expected to sign the given message.
	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// The message to be signed.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SignMessageRequest) Reset() {
	*x = SignMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignMessageRequest) ProtoMessage() {}

func (x *SignMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignMessageRequest.ProtoReflect.Descriptor instead.
func (*SignMessageRequest) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{18}
}

func (x *SignMessageRequest) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *SignMessageRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SignMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*SignMessageResponse_Rejected
	//	*SignMessageResponse_Signature
	Msg isSignMessageResponse_Msg `protobuf_oneof:"msg"`
}

func (x *SignMessageResponse) Reset() {
	*x = SignMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignMessageResponse) ProtoMessage() {}

func (x *SignMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignMessageResponse.ProtoReflect.Descriptor instead.
func (*SignMessageResponse) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{19}
}

func (m *SignMessageResponse) GetMsg() isSignMessageResponse_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *SignMessageResponse) GetRejected() *Rejected {
	if x, ok := x.GetMsg().(*SignMessageResponse_Rejected); ok {
		return x.Rejected
	}
	return nil
}

func (x *SignMessageResponse) GetSignature() []byte {
	if x, ok := x.GetMsg().(*SignMessageResponse_Signature); ok {
		return x.Signature
	}
	return nil
}

type isSignMessageResponse_Msg interface {
	isSignMessageResponse_Msg()
}

type SignMessageResponse_Rejected struct {
	Rejected *Rejected `protobuf:"bytes,1,opt,name=rejected,proto3,oneof"`
}

type SignMessageResponse_Signature struct {
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3,oneof"`
}

func (*SignMessageResponse_Rejected) isSignMessageResponse_Msg() {}

func (*SignMessageResponse_Signature) isSignMessageResponse_Msg() {}

type GetAssetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested assets.
	Assets *protobuf.Balances `protobuf:"bytes,1,opt,name=assets,proto3" json:"assets,omitempty"`
}

func (x *GetAssetsRequest) Reset() {
	*x = GetAssetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetsRequest) ProtoMessage() {}

func (x *GetAssetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetsRequest.ProtoReflect.Descriptor instead.
func (*GetAssetsRequest) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{20}
}

func (x *GetAssetsRequest) GetAssets() *protobuf.Balances {
	if x != nil {
		return x.Assets
	}
	return nil
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asset id of the asset.
	AssetId []byte `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{21}
}

func (x *Asset) GetAssetId() []byte {
	if x != nil {
		return x.AssetId
	}
	return nil
}

type UnmatchableAssetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the unmatchable assets from the original request.
	AssetIdx uint32 `protobuf:"varint,1,opt,name=asset_idx,json=assetIdx,proto3" json:"asset_idx,omitempty"`
	// A possible reason if more information is available.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *UnmatchableAssetsResponse) Reset() {
	*x = UnmatchableAssetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmatchableAssetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmatchableAssetsResponse) ProtoMessage() {}

func (x *UnmatchableAssetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmatchableAssetsResponse.ProtoReflect.Descriptor instead.
func (*UnmatchableAssetsResponse) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{22}
}

func (x *UnmatchableAssetsResponse) GetAssetIdx() uint32 {
	if x != nil {
		return x.AssetIdx
	}
	return 0
}

func (x *UnmatchableAssetsResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type GetAssetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*GetAssetsResponse_Rejected
	Msg isGetAssetsResponse_Msg `protobuf_oneof:"msg"`
}

func (x *GetAssetsResponse) Reset() {
	*x = GetAssetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetsResponse) ProtoMessage() {}

func (x *GetAssetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetsResponse.ProtoReflect.Descriptor instead.
func (*GetAssetsResponse) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{23}
}

func (m *GetAssetsResponse) GetMsg() isGetAssetsResponse_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *GetAssetsResponse) GetRejected() *UnmatchableAssetsResponse {
	if x, ok := x.GetMsg().(*GetAssetsResponse_Rejected); ok {
		return x.Rejected
	}
	return nil
}

type isGetAssetsResponse_Msg interface {
	isGetAssetsResponse_Msg()
}

type GetAssetsResponse_Rejected struct {
	Rejected *UnmatchableAssetsResponse `protobuf:"bytes,2,opt,name=rejected,proto3,oneof"`
}

func (*GetAssetsResponse_Rejected) isGetAssetsResponse_Msg() {}

type SignTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier []byte `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The transaction to be signed.
	Transaction []byte `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *SignTransactionRequest) Reset() {
	*x = SignTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTransactionRequest) ProtoMessage() {}

func (x *SignTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTransactionRequest.ProtoReflect.Descriptor instead.
func (*SignTransactionRequest) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{24}
}

func (x *SignTransactionRequest) GetIdentifier() []byte {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *SignTransactionRequest) GetTransaction() []byte {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type SignTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*SignTransactionResponse_Rejected
	//	*SignTransactionResponse_Transaction
	Msg isSignTransactionResponse_Msg `protobuf_oneof:"msg"`
}

func (x *SignTransactionResponse) Reset() {
	*x = SignTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perun_wallet_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignTransactionResponse) ProtoMessage() {}

func (x *SignTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_perun_wallet_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignTransactionResponse.ProtoReflect.Descriptor instead.
func (*SignTransactionResponse) Descriptor() ([]byte, []int) {
	return file_perun_wallet_proto_rawDescGZIP(), []int{25}
}

func (m *SignTransactionResponse) GetMsg() isSignTransactionResponse_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *SignTransactionResponse) GetRejected() *Rejected {
	if x, ok := x.GetMsg().(*SignTransactionResponse_Rejected); ok {
		return x.Rejected
	}
	return nil
}

func (x *SignTransactionResponse) GetTransaction() []byte {
	if x, ok := x.GetMsg().(*SignTransactionResponse_Transaction); ok {
		return x.Transaction
	}
	return nil
}

type isSignTransactionResponse_Msg interface {
	isSignTransactionResponse_Msg()
}

type SignTransactionResponse_Rejected struct {
	Rejected *Rejected `protobuf:"bytes,1,opt,name=rejected,proto3,oneof"`
}

type SignTransactionResponse_Transaction struct {
	// The signed transaction.
	Transaction []byte `protobuf:"bytes,2,opt,name=transaction,proto3,oneof"`
}

func (*SignTransactionResponse_Rejected) isSignTransactionResponse_Msg() {}

func (*SignTransactionResponse_Transaction) isSignTransactionResponse_Msg() {}

var File_perun_wallet_proto protoreflect.FileDescriptor

var file_perun_wallet_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x2d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0x0a, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x22, 0x0a, 0x08, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x32, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x22, 0x7c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x65, 0x72, 0x75, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0xac, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x73, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x72, 0x75,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x42, 0x05,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x3e, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x65, 0x72, 0x75, 0x6e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x59, 0x0a, 0x10, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e,
	0x77, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x22, 0x8e, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x65, 0x72, 0x75, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x38, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x34, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x0f, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42,
	0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x55, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x4d, 0x73, 0x67, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x22, 0x75, 0x0a,
	0x13, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x05, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0x5c, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x65, 0x72, 0x75,
	0x6e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x61, 0x0a, 0x18, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x65, 0x72, 0x75, 0x6e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x5e, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x65, 0x72, 0x75, 0x6e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x43, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x38, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x22, 0x40, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x72, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x3f, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0x22, 0x0a, 0x05, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22,
	0x50, 0x0a, 0x19, 0x55, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x61, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x05, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0x5a, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x7a, 0x0a, 0x17, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x22, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x32, 0xe9, 0x02, 0x0a,
	0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x52, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20,
	0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x22, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a,
	0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x21, 0x2e,
	0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xce, 0x03, 0x0a, 0x0d, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x4f, 0x70,
	0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x2e, 0x70, 0x65, 0x72, 0x75,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x65,
	0x72, 0x75, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x53,
	0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x65, 0x72, 0x75, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_perun_wallet_proto_rawDescOnce sync.Once
	file_perun_wallet_proto_rawDescData = file_perun_wallet_proto_rawDesc
)

func file_perun_wallet_proto_rawDescGZIP() []byte {
	file_perun_wallet_proto_rawDescOnce.Do(func() {
		file_perun_wallet_proto_rawDescData = protoimpl.X.CompressGZIP(file_perun_wallet_proto_rawDescData)
	})
	return file_perun_wallet_proto_rawDescData
}

var file_perun_wallet_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_perun_wallet_proto_goTypes = []interface{}{
	(*Rejected)(nil),                          // 0: perunservice.Rejected
	(*GetChannelsRequest)(nil),                // 1: perunservice.GetChannelsRequest
	(*GetChannelsResponse)(nil),               // 2: perunservice.GetChannelsResponse
	(*ChannelOpenRequest)(nil),                // 3: perunservice.ChannelOpenRequest
	(*ChannelOpenResponse)(nil),               // 4: perunservice.ChannelOpenResponse
	(*ChannelUpdateRequest)(nil),              // 5: perunservice.ChannelUpdateRequest
	(*SuccessfulUpdate)(nil),                  // 6: perunservice.SuccessfulUpdate
	(*ChannelUpdateResponse)(nil),             // 7: perunservice.ChannelUpdateResponse
	(*ChannelCloseRequest)(nil),               // 8: perunservice.ChannelCloseRequest
	(*SuccessfulClose)(nil),                   // 9: perunservice.SuccessfulClose
	(*ChannelCloseResponse)(nil),              // 10: perunservice.ChannelCloseResponse
	(*OpenChannelRequest)(nil),                // 11: perunservice.OpenChannelRequest
	(*OpenChannelResponse)(nil),               // 12: perunservice.OpenChannelResponse
	(*CloseChannelRequest)(nil),               // 13: perunservice.CloseChannelRequest
	(*ForceCloseChannelRequest)(nil),          // 14: perunservice.ForceCloseChannelRequest
	(*ChallengeEventRequest)(nil),             // 15: perunservice.ChallengeEventRequest
	(*UpdateNotificationRequest)(nil),         // 16: perunservice.UpdateNotificationRequest
	(*UpdateNotificationResponse)(nil),        // 17: perunservice.UpdateNotificationResponse
	(*SignMessageRequest)(nil),                // 18: perunservice.SignMessageRequest
	(*SignMessageResponse)(nil),               // 19: perunservice.SignMessageResponse
	(*GetAssetsRequest)(nil),                  // 20: perunservice.GetAssetsRequest
	(*Asset)(nil),                             // 21: perunservice.Asset
	(*UnmatchableAssetsResponse)(nil),         // 22: perunservice.UnmatchableAssetsResponse
	(*GetAssetsResponse)(nil),                 // 23: perunservice.GetAssetsResponse
	(*SignTransactionRequest)(nil),            // 24: perunservice.SignTransactionRequest
	(*SignTransactionResponse)(nil),           // 25: perunservice.SignTransactionResponse
	(*protobuf.State)(nil),                    // 26: perunwire.State
	(*protobuf.Allocation)(nil),               // 27: perunwire.Allocation
	(*protobuf.LedgerChannelProposalMsg)(nil), // 28: perunwire.LedgerChannelProposalMsg
	(*protobuf.Balances)(nil),                 // 29: perunwire.Balances
}
var file_perun_wallet_proto_depIdxs = []int32{
	0,  // 0: perunservice.GetChannelsResponse.rejected:type_name -> perunservice.Rejected
	26, // 1: perunservice.GetChannelsResponse.state:type_name -> perunwire.State
	27, // 2: perunservice.ChannelOpenRequest.allocation:type_name -> perunwire.Allocation
	0,  // 3: perunservice.ChannelOpenResponse.rejected:type_name -> perunservice.Rejected
	26, // 4: perunservice.ChannelUpdateRequest.state:type_name -> perunwire.State
	26, // 5: perunservice.SuccessfulUpdate.state:type_name -> perunwire.State
	0,  // 6: perunservice.ChannelUpdateResponse.rejected:type_name -> perunservice.Rejected
	6,  // 7: perunservice.ChannelUpdateResponse.update:type_name -> perunservice.SuccessfulUpdate
	0,  // 8: perunservice.ChannelCloseResponse.rejected:type_name -> perunservice.Rejected
	9,  // 9: perunservice.ChannelCloseResponse.close:type_name -> perunservice.SuccessfulClose
	28, // 10: perunservice.OpenChannelRequest.proposal:type_name -> perunwire.LedgerChannelProposalMsg
	0,  // 11: perunservice.OpenChannelResponse.rejected:type_name -> perunservice.Rejected
	26, // 12: perunservice.CloseChannelRequest.state:type_name -> perunwire.State
	26, // 13: perunservice.ForceCloseChannelRequest.state:type_name -> perunwire.State
	26, // 14: perunservice.ChallengeEventRequest.state:type_name -> perunwire.State
	26, // 15: perunservice.UpdateNotificationRequest.state:type_name -> perunwire.State
	0,  // 16: perunservice.SignMessageResponse.rejected:type_name -> perunservice.Rejected
	29, // 17: perunservice.GetAssetsRequest.assets:type_name -> perunwire.Balances
	22, // 18: perunservice.GetAssetsResponse.rejected:type_name -> perunservice.UnmatchableAssetsResponse
	0,  // 19: perunservice.SignTransactionResponse.rejected:type_name -> perunservice.Rejected
	3,  // 20: perunservice.ChannelService.OpenChannel:input_type -> perunservice.ChannelOpenRequest
	5,  // 21: perunservice.ChannelService.UpdateChannel:input_type -> perunservice.ChannelUpdateRequest
	8,  // 22: perunservice.ChannelService.CloseChannel:input_type -> perunservice.ChannelCloseRequest
	1,  // 23: perunservice.ChannelService.GetChannels:input_type -> perunservice.GetChannelsRequest
	11, // 24: perunservice.WalletService.OpenChannel:input_type -> perunservice.OpenChannelRequest
	16, // 25: perunservice.WalletService.UpdateNotification:input_type -> perunservice.UpdateNotificationRequest
	18, // 26: perunservice.WalletService.SignMessage:input_type -> perunservice.SignMessageRequest
	24, // 27: perunservice.WalletService.SignTransaction:input_type -> perunservice.SignTransactionRequest
	20, // 28: perunservice.WalletService.GetAssets:input_type -> perunservice.GetAssetsRequest
	4,  // 29: perunservice.ChannelService.OpenChannel:output_type -> perunservice.ChannelOpenResponse
	7,  // 30: perunservice.ChannelService.UpdateChannel:output_type -> perunservice.ChannelUpdateResponse
	10, // 31: perunservice.ChannelService.CloseChannel:output_type -> perunservice.ChannelCloseResponse
	2,  // 32: perunservice.ChannelService.GetChannels:output_type -> perunservice.GetChannelsResponse
	12, // 33: perunservice.WalletService.OpenChannel:output_type -> perunservice.OpenChannelResponse
	17, // 34: perunservice.WalletService.UpdateNotification:output_type -> perunservice.UpdateNotificationResponse
	19, // 35: perunservice.WalletService.SignMessage:output_type -> perunservice.SignMessageResponse
	25, // 36: perunservice.WalletService.SignTransaction:output_type -> perunservice.SignTransactionResponse
	23, // 37: perunservice.WalletService.GetAssets:output_type -> perunservice.GetAssetsResponse
	29, // [29:38] is the sub-list for method output_type
	20, // [20:29] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_perun_wallet_proto_init() }
func file_perun_wallet_proto_init() {
	if File_perun_wallet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_perun_wallet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rejected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelOpenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelOpenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuccessfulUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelCloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuccessfulClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceCloseChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmatchableAssetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perun_wallet_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_perun_wallet_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*GetChannelsResponse_Rejected)(nil),
		(*GetChannelsResponse_State)(nil),
	}
	file_perun_wallet_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ChannelOpenResponse_Rejected)(nil),
		(*ChannelOpenResponse_ChannelId)(nil),
	}
	file_perun_wallet_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ChannelUpdateResponse_Rejected)(nil),
		(*ChannelUpdateResponse_Update)(nil),
	}
	file_perun_wallet_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ChannelCloseResponse_Rejected)(nil),
		(*ChannelCloseResponse_Close)(nil),
	}
	file_perun_wallet_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*OpenChannelResponse_Rejected)(nil),
		(*OpenChannelResponse_NonceShare)(nil),
	}
	file_perun_wallet_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*SignMessageResponse_Rejected)(nil),
		(*SignMessageResponse_Signature)(nil),
	}
	file_perun_wallet_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*GetAssetsResponse_Rejected)(nil),
	}
	file_perun_wallet_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*SignTransactionResponse_Rejected)(nil),
		(*SignTransactionResponse_Transaction)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_perun_wallet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_perun_wallet_proto_goTypes,
		DependencyIndexes: file_perun_wallet_proto_depIdxs,
		MessageInfos:      file_perun_wallet_proto_msgTypes,
	}.Build()
	File_perun_wallet_proto = out.File
	file_perun_wallet_proto_rawDesc = nil
	file_perun_wallet_proto_goTypes = nil
	file_perun_wallet_proto_depIdxs = nil
}
